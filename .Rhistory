geom_point(data = filter(cum_count, Year == my_year, Day <= my_day),
aes(x = Day, y = CumCount/1000), color = "black") +
labs(x = "Day of Year", y = "Chinook Salmon (x 1000)", color = "") +
scale_x_continuous(breaks = c(test_days), labels = c(
"June 2",
"June 7",
"June 12",
"June 17",
"June 22",
"June 27",
"July 2",
"July 7",
"July 12",
"July 17",
"July 22",
"July 27",
"Aug 1")) +
scale_y_continuous(breaks = seq(0, 300, 25)) +
theme(legend.position = "right",
panel.grid.major.y = element_line(linetype = 2, size = .3, color = "lightgrey"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", fill = NA),
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = unit(c(20, 7, 5.5, 5.5), "pt"),
text = element_text(size = 12),
axis.text.x = element_text(angle = 55, vjust = 0.5, hjust = 0.5))
cum_count %>%
ggplot(aes(x = Day, y = CumCount/1000, color = factor(Year))) +
scale_color_grey(start = .8, end = 0) +
geom_line() +
geom_point(data = filter(cum_count, Year == my_year, Day <= my_day),
aes(x = Day, y = CumCount/1000), color = "black") +
labs(x = "Day of Year", y = "Chinook Salmon (x 1000)", color = "") +
scale_x_continuous(breaks = c(test_days), labels = c(
"June 2",
"June 7",
"June 12",
"June 17",
"June 22",
"June 27",
"July 2",
"July 7",
"July 12",
"July 17",
"July 22",
"July 27",
"Aug 1")) +
scale_y_continuous(breaks = seq(0, 300, 25)) +
theme(legend.position = "right",
panel.grid.major.y = element_line(linetype = 2, size = .3, color = "lightgrey"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", fill = NA),
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = unit(c(20, 7, 5.5, 5.5), "pt"),
text = element_text(size = 12),
axis.text.x = element_text(angle = 55, hjust = 0.5))
cum_count %>%
ggplot(aes(x = Day, y = CumCount/1000, color = factor(Year))) +
scale_color_grey(start = .8, end = 0) +
geom_line() +
geom_point(data = filter(cum_count, Year == my_year, Day <= my_day),
aes(x = Day, y = CumCount/1000), color = "black") +
labs(x = "Day of Year", y = "Chinook Salmon (x 1000)", color = "") +
scale_x_continuous(breaks = c(test_days), labels = c(
"June 2",
"June 7",
"June 12",
"June 17",
"June 22",
"June 27",
"July 2",
"July 7",
"July 12",
"July 17",
"July 22",
"July 27",
"Aug 1")) +
scale_y_continuous(breaks = seq(0, 300, 25)) +
theme(legend.position = "right",
panel.grid.major.y = element_line(linetype = 2, size = .3, color = "lightgrey"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", fill = NA),
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = unit(c(20, 7, 5.5, 5.5), "pt"),
text = element_text(size = 12),
axis.text.x = element_text(angle = 55, vjust = 0.5, hjust = 0.5))
eagle_hist <- ESS %>%
mutate(Day = 178:243) %>% # julian day column from 6/27 to 8/31 (non-leap years)
select(-`Month/Day`) %>%
pivot_longer(cols = -c(Day),
names_to = "Year",
values_to = "count",
names_transform  = list(Year = as.numeric)) %>%
replace_na(list(count = 0)) %>%
arrange(Year)
cumcount_eagle <- eagle_hist %>%
filter(Year >= 2005, Day <= 225) %>%
mutate(CumCount = cumsum(count), .by = Year)
cumcount_eagle %>%
filter(Year < 2023) %>%
ggplot(aes(x = Day, y = CumCount/1000, color = factor(Year))) +
geom_line() +
geom_point(data = filter(cumcount_eagle, Year == my_year, Day <= my_day),
aes(x = Day, y = CumCount/1000), color = "black") +
labs(x = "Day of Year", y = "Chinook Salmon (x 1000)", color = "") +
scale_x_continuous(breaks = c(test_days), labels = c(
# "June 2",
# "June 7",
# "June 12",
# "June 17",
# "June 22",
"June 27",
"July 2",
"July 7",
"July 12",
"July 17",
"July 22",
"July 27",
"Aug 1"))+
scale_color_grey(start = .8, end = 0)+
theme(legend.position = "right",
panel.grid.major.y = element_line(linetype = 2, size = .3,
color = "lightgrey"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", fill = NA),
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = unit(c(20, 7, 5.5, 5.5), "pt"),
text = element_text(size = 12),
axis.text = element_text(angle = 55, vjust = 0.5, hjust = 0.5))
eagle_hist <- ESS %>%
mutate(Day = 178:243) %>% # julian day column from 6/27 to 8/31 (non-leap years)
select(-`Month/Day`) %>%
pivot_longer(cols = -c(Day),
names_to = "Year",
values_to = "count",
names_transform  = list(Year = as.numeric)) %>%
replace_na(list(count = 0)) %>%
arrange(Year)
cumcount_eagle <- eagle_hist %>%
filter(Year >= 2005, Day <= 225) %>%
mutate(CumCount = cumsum(count), .by = Year)
cumcount_eagle %>%
filter(Year < 2023) %>%
ggplot(aes(x = Day, y = CumCount/1000, color = factor(Year))) +
geom_line() +
geom_point(data = filter(cumcount_eagle, Year == my_year, Day <= my_day),
aes(x = Day, y = CumCount/1000), color = "black") +
labs(x = "Day of Year", y = "Chinook Salmon (x 1000)", color = "") +
scale_x_continuous(breaks = c(test_days), labels = c(
"June 2",
"June 7",
"June 12",
"June 17",
"June 22",
"June 27",
"July 2",
"July 7",
"July 12",
"July 17",
"July 22",
"July 27",
"Aug 1"))+
scale_color_grey(start = .8, end = 0)+
theme(legend.position = "right",
panel.grid.major.y = element_line(linetype = 2, size = .3,
color = "lightgrey"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", fill = NA),
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = unit(c(20, 7, 5.5, 5.5), "pt"),
text = element_text(size = 12),
axis.text = element_text(angle = 55, vjust = 0.5, hjust = 0.5))
test_dats
test_days
cumcount_eagle
View(eagle_hist)
unique(cumcount_eagle$Day)
as.Date(unique(cumcount_eagle$Day), origin = as.Date("2024-01-01"))
as.Date(unique(cumcount_eagle$Day), origin = as.Date("2023-01-01"))
seq(from = 178, to = 225, by = 5)
unique(cum_count$Day)
as.Date(test_days, origin = as.Date("2023-01-01"))
as.Date(test_days, origin = as.Date("2023-01-01"), format = "%M%D")
as.Date(test_days, origin = as.Date("2023-01-01"), format = "%B%d")
seq(from = 180, to = 225, by = 5)
# set to working directory
wd <- "D:/bobby_adfg/projects/yukon_chinook_inseason_mdl/Bayesian-Inseason-Canadian-origin-Chinook-Salmon-Abundance-projection-main"
# setwd(wd)
# Objects used to save/load data, outputs, or stan/R scripts
dir.data <- file.path(wd, "data")
# PSS and ES data
# Read in the file as xlsx !!!CHANGE FILE HERE Daily!!!!!!!!!
PSS <-
readxl::read_xlsx(
file.path(dir.data, "ADFG PSS Daily Reports/Yukon Escapement Daily 9Aug23.xlsx"),
skip = 3)
ESS <-
readxl::read_xlsx(
file.path(dir.data, "ADFG Eagle Daily Reports/Yukon Escapement Daily Eagle 9Aug23.xlsx"),
skip = 3)
# Day of the projection (used as in-text date)
projection_day <- "August 27, 2023"
# Year of the projection
my_year <- 2023
end_year <- my_year - 1
# Set my_day using the my_day_func function
#  Enter month and day as numbers
my_day <- bica::my_day_func(Month = 8, Day = 9)
# Days for plotting date
test_days <- seq(from = 153, to = 213, by = 5)
test_lable <- as.Date(test_days, origin = as.Date("2023-01-01"))
test_days_eagle <- seq(from = 180, to = 225, by = 5)
test_lable_eagle <- as.Date(test_days_eagle, origin = as.Date("2023-01-01"))
# Historical Canadian EOS reconstructed run
# This is the reconstructed data from Curry for old reconstructed modeling procedure
can_hist <- readRDS(file.path(dir.data, "Canadian Chinook Passage RR 2Apr24.RDS"))
# PSS historical for Jun 1st = 152, to Aug 31 = 243
# Data obtained from ADFG website
# https://www.adfg.alaska.gov/index.cfm?adfg=commercialbyareayukon.salmon_escapement
# NOTE!!!! See use "Dataframe preprocess.R" to get  most recent version.
#  If not using Dataframe preprocess.R, uncomment out the following to load relevant PSS historical data
# PSS_hist <- readRDS(file = file.path(dir.data,"PSS passage 22Jun22.RDS"))
# Read in historical avg of GSI by strata (Naive estimator)
# GSI_mean <- readRDS(file = file.path(dir.data,"Mean GSI by strata 2005-2020.RDS"))
# Read in historic preseason forecasts (2013 - current)
# pf_hist <- readRDS(file.path(dir.data,"preseason forcast.RDS"))
pf_hist <- readRDS(file.path(dir.data, "Yukon Canadian Chinook PF 29May24.RDS"))
# Read in genetic stock identification (2005-2019)
# (adjusted to capture early and late runs)
# GSI_by_year <- readRDS(file = file.path(dir.data,"GSI by year"))
# gsi_by_year <- readRDS(file = file.path(dir.data,"GSI by year unadj 4Apr24.RDS"))
# Shape parameters for fitting curves
prior_df_log <- read.csv(file = file.path(dir.data,"logistic curve parameters All Chinook 1995_2022.csv"))
# Normal curve fitting parameters
# normal.all <- read.csv(file = file.path(dir.data,"normal curve parameters All Chinook 1995_2022.csv"))
prior_df_norm <- readRDS(file = file.path(dir.data, "normal curve parameters All Chinook 1995_2023.RDS"))
# Read in PSS observation error estimates
pss_sd <- readRDS(file = file.path(dir.data,"PSS SD 1995_2021.RDS"))
bica_data <- bica::format_bica_data(
my_year, my_day, end_year,
pf_hist, can_hist, pss_hist = PSS, eagle_hist = ESS,
gsi_by_year = NULL,
pss_sd, prior_df_log, prior_df_norm,
start_day_pss = 148, start_year_pss = 1995
)
# Run the model for a single year and day of interest.
#  Adjust the inputs for the model in the control section above
# Model version used in projection
model_version <- "pss_prop_es_prop"
# MCMC Parameters
n_chains <- 4
n_iter <- 5000
n_thin <- 5
bica_out <- bica::run_bica_model(
bica_data, model_version,
n_chains, n_iter, n_thin
)
pars <- rstan::extract(bica_out$stanfit)
# Use ecdf to calculate CDF
run_size_ecdf <- ecdf(pars$run_size)
# Lower escapement goal
lwr_esc <- 42500
# Probability of meeting escapement goal give projection
prob_escapement <- run_size_ecdf(lwr_esc)
rm(test_lable, test_lable_eagle)
# set to working directory
wd <- "D:/bobby_adfg/projects/yukon_chinook_inseason_mdl/Bayesian-Inseason-Canadian-origin-Chinook-Salmon-Abundance-projection-main"
# setwd(wd)
# Objects used to save/load data, outputs, or stan/R scripts
dir.data <- file.path(wd, "data")
# PSS and ES data
# Read in the file as xlsx !!!CHANGE FILE HERE Daily!!!!!!!!!
PSS <-
readxl::read_xlsx(
file.path(dir.data, "ADFG PSS Daily Reports/Yukon Escapement Daily 9Aug23.xlsx"),
skip = 3)
ESS <-
readxl::read_xlsx(
file.path(dir.data, "ADFG Eagle Daily Reports/Yukon Escapement Daily Eagle 9Aug23.xlsx"),
skip = 3)
# Day of the projection (used as in-text date)
projection_day <- "August 27, 2023"
# Year of the projection
my_year <- 2023
end_year <- my_year - 1
# Set my_day using the my_day_func function
#  Enter month and day as numbers
my_day <- bica::my_day_func(Month = 8, Day = 9)
# Days for plotting date
test_days <- seq(from = 153, to = 213, by = 5)
test_label <- as.Date(test_days, origin = as.Date("2023-01-01"))
test_days_eagle <- seq(from = 180, to = 225, by = 5)
test_label_eagle <- as.Date(test_days_eagle, origin = as.Date("2023-01-01"))
# Historical Canadian EOS reconstructed run
# This is the reconstructed data from Curry for old reconstructed modeling procedure
can_hist <- readRDS(file.path(dir.data, "Canadian Chinook Passage RR 2Apr24.RDS"))
# PSS historical for Jun 1st = 152, to Aug 31 = 243
# Data obtained from ADFG website
# https://www.adfg.alaska.gov/index.cfm?adfg=commercialbyareayukon.salmon_escapement
# NOTE!!!! See use "Dataframe preprocess.R" to get  most recent version.
#  If not using Dataframe preprocess.R, uncomment out the following to load relevant PSS historical data
# PSS_hist <- readRDS(file = file.path(dir.data,"PSS passage 22Jun22.RDS"))
# Read in historical avg of GSI by strata (Naive estimator)
# GSI_mean <- readRDS(file = file.path(dir.data,"Mean GSI by strata 2005-2020.RDS"))
# Read in historic preseason forecasts (2013 - current)
# pf_hist <- readRDS(file.path(dir.data,"preseason forcast.RDS"))
pf_hist <- readRDS(file.path(dir.data, "Yukon Canadian Chinook PF 29May24.RDS"))
# Read in genetic stock identification (2005-2019)
# (adjusted to capture early and late runs)
# GSI_by_year <- readRDS(file = file.path(dir.data,"GSI by year"))
# gsi_by_year <- readRDS(file = file.path(dir.data,"GSI by year unadj 4Apr24.RDS"))
# Shape parameters for fitting curves
prior_df_log <- read.csv(file = file.path(dir.data,"logistic curve parameters All Chinook 1995_2022.csv"))
# Normal curve fitting parameters
# normal.all <- read.csv(file = file.path(dir.data,"normal curve parameters All Chinook 1995_2022.csv"))
prior_df_norm <- readRDS(file = file.path(dir.data, "normal curve parameters All Chinook 1995_2023.RDS"))
# Read in PSS observation error estimates
pss_sd <- readRDS(file = file.path(dir.data,"PSS SD 1995_2021.RDS"))
bica_data <- bica::format_bica_data(
my_year, my_day, end_year,
pf_hist, can_hist, pss_hist = PSS, eagle_hist = ESS,
gsi_by_year = NULL,
pss_sd, prior_df_log, prior_df_norm,
start_day_pss = 148, start_year_pss = 1995
)
pss_hist <- PSS %>%
mutate(Day = 148:252) %>% # julian day column from 5/28 to 9/9 (non-leap years)
select(-`Month/Day`) %>%
pivot_longer(cols = -c(Day),
names_to = "Year",
values_to = "count",
names_transform = list(Year = as.numeric)) %>%
replace_na(list(count = 0)) %>% # replace NA with zero
arrange(Year)
cum_count <- pss_hist %>%
filter(Year >= 2005, Day <= 213) %>%
mutate(CumCount = cumsum(count), .by = Year)
cum_count %>%
ggplot(aes(x = Day, y = CumCount/1000, color = factor(Year))) +
scale_color_grey(start = .8, end = 0) +
geom_line() +
geom_point(data = filter(cum_count, Year == my_year, Day <= my_day),
aes(x = Day, y = CumCount/1000), color = "black") +
labs(x = "Day of Year", y = "Chinook Salmon (x 1000)", color = "") +
scale_x_continuous(breaks = c(test_days), labels = test_label) +
scale_y_continuous(breaks = seq(0, 300, 25)) +
theme(legend.position = "right",
panel.grid.major.y = element_line(linetype = 2, size = .3, color = "lightgrey"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", fill = NA),
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = unit(c(20, 7, 5.5, 5.5), "pt"),
text = element_text(size = 12),
axis.text.x = element_text(angle = 55, vjust = 0.5, hjust = 0.5))
as.Date(test_days, origin = as.Date("2023-01-01")) %>%
format("%b%d")
test_label <- as.Date(test_days, origin = as.Date("2023-01-01")) %>%
format("%b%d")
test_label_eagle <- as.Date(test_days_eagle, origin = as.Date("2023-01-01")) %>%
format("%b%d")
pss_hist <- PSS %>%
mutate(Day = 148:252) %>% # julian day column from 5/28 to 9/9 (non-leap years)
select(-`Month/Day`) %>%
pivot_longer(cols = -c(Day),
names_to = "Year",
values_to = "count",
names_transform = list(Year = as.numeric)) %>%
replace_na(list(count = 0)) %>% # replace NA with zero
arrange(Year)
cum_count <- pss_hist %>%
filter(Year >= 2005, Day <= 213) %>%
mutate(CumCount = cumsum(count), .by = Year)
cum_count %>%
ggplot(aes(x = Day, y = CumCount/1000, color = factor(Year))) +
scale_color_grey(start = .8, end = 0) +
geom_line() +
geom_point(data = filter(cum_count, Year == my_year, Day <= my_day),
aes(x = Day, y = CumCount/1000), color = "black") +
labs(x = "Day of Year", y = "Chinook Salmon (x 1000)", color = "") +
scale_x_continuous(breaks = c(test_days), labels = test_label) +
scale_y_continuous(breaks = seq(0, 300, 25)) +
theme(legend.position = "right",
panel.grid.major.y = element_line(linetype = 2, size = .3, color = "lightgrey"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", fill = NA),
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = unit(c(20, 7, 5.5, 5.5), "pt"),
text = element_text(size = 12),
axis.text.x = element_text(angle = 55, vjust = 0.5, hjust = 0.5))
as.Date(test_days, origin = as.Date("2023-01-01")) %>%
format("%b %d")
test_label <- as.Date(test_days, origin = as.Date("2023-01-01")) %>%
format("%b %d")
test_label_eagle <- as.Date(test_days_eagle, origin = as.Date("2023-01-01")) %>%
format("%b %d")
pss_hist <- PSS %>%
mutate(Day = 148:252) %>% # julian day column from 5/28 to 9/9 (non-leap years)
select(-`Month/Day`) %>%
pivot_longer(cols = -c(Day),
names_to = "Year",
values_to = "count",
names_transform = list(Year = as.numeric)) %>%
replace_na(list(count = 0)) %>% # replace NA with zero
arrange(Year)
cum_count <- pss_hist %>%
filter(Year >= 2005, Day <= 213) %>%
mutate(CumCount = cumsum(count), .by = Year)
cum_count %>%
ggplot(aes(x = Day, y = CumCount/1000, color = factor(Year))) +
scale_color_grey(start = .8, end = 0) +
geom_line() +
geom_point(data = filter(cum_count, Year == my_year, Day <= my_day),
aes(x = Day, y = CumCount/1000), color = "black") +
labs(x = "Day of Year", y = "Chinook Salmon (x 1000)", color = "") +
scale_x_continuous(breaks = c(test_days), labels = test_label) +
scale_y_continuous(breaks = seq(0, 300, 25)) +
theme(legend.position = "right",
panel.grid.major.y = element_line(linetype = 2, size = .3, color = "lightgrey"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", fill = NA),
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = unit(c(20, 7, 5.5, 5.5), "pt"),
text = element_text(size = 12),
axis.text.x = element_text(angle = 55, vjust = 0.5, hjust = 0.5))
eagle_hist <- ESS %>%
mutate(Day = 178:243) %>% # julian day column from 6/27 to 8/31 (non-leap years)
select(-`Month/Day`) %>%
pivot_longer(cols = -c(Day),
names_to = "Year",
values_to = "count",
names_transform  = list(Year = as.numeric)) %>%
replace_na(list(count = 0)) %>%
arrange(Year)
cumcount_eagle <- eagle_hist %>%
filter(Year >= 2005, Day <= 225) %>%
mutate(CumCount = cumsum(count), .by = Year)
cumcount_eagle %>%
filter(Year < 2023) %>%
ggplot(aes(x = Day, y = CumCount/1000, color = factor(Year))) +
geom_line() +
geom_point(data = filter(cumcount_eagle, Year == my_year, Day <= my_day),
aes(x = Day, y = CumCount/1000), color = "black") +
labs(x = "Day of Year", y = "Chinook Salmon (x 1000)", color = "") +
scale_x_continuous(breaks = c(test_days_eagle), labels = test_label_eagle)+
scale_color_grey(start = .8, end = 0)+
theme(legend.position = "right",
panel.grid.major.y = element_line(linetype = 2, size = .3,
color = "lightgrey"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", fill = NA),
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = unit(c(20, 7, 5.5, 5.5), "pt"),
text = element_text(size = 12),
axis.text = element_text(angle = 55, vjust = 0.5, hjust = 0.5))
cumcount_eagle %>%
filter(Year < 2023) %>%
ggplot(aes(x = Day, y = CumCount/1000, color = factor(Year))) +
geom_line() +
geom_point(data = filter(cumcount_eagle, Year == my_year, Day <= my_day),
aes(x = Day, y = CumCount/1000), color = "black") +
labs(x = "Day of Year", y = "Chinook Salmon (x 1000)", color = "") +
scale_x_continuous(breaks = c(test_days_eagle), labels = test_label_eagle)+
scale_color_grey(start = .8, end = 0)+
theme(legend.position = "right",
panel.grid.major.y = element_line(linetype = 2, size = .3,
color = "lightgrey"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", fill = NA),
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = unit(c(20, 7, 5.5, 5.5), "pt"),
text = element_text(size = 12),
axis.text = element_text(angle = 55, vjust = 1, hjust = 0.5))
cumcount_eagle %>%
filter(Year < 2023) %>%
ggplot(aes(x = Day, y = CumCount/1000, color = factor(Year))) +
geom_line() +
geom_point(data = filter(cumcount_eagle, Year == my_year, Day <= my_day),
aes(x = Day, y = CumCount/1000), color = "black") +
labs(x = "Day of Year", y = "Chinook Salmon (x 1000)", color = "") +
scale_x_continuous(breaks = c(test_days_eagle), labels = test_label_eagle)+
scale_color_grey(start = .8, end = 0)+
theme(legend.position = "right",
panel.grid.major.y = element_line(linetype = 2, size = .3,
color = "lightgrey"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(color = "black", fill = NA),
plot.background = element_blank(),
panel.background = element_blank(),
plot.margin = unit(c(20, 7, 5.5, 5.5), "pt"),
text = element_text(size = 12),
axis.text = element_text(angle = 55, vjust = 1, hjust = 1))
