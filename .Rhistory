wd <- "D:/bobby_adfg/projects/yukon_chinook_inseason_mdl/Bayesian-Inseason-Canadian-origin-Chinook-Salmon-Abundance-projection-main"
dir.data <- file.path(wd,"data")
my_year <- 2023
my_day <- my_day_func(Month = 8, Day = 9)
end_year <- my_year - 1
pf_hist <- readRDS(file.path(dir.data,"Yukon Canadian Chinook PF 29May24.RDS"))
can_hist <- readRDS(file.path(dir.data,"Canadian Chinook Passage RR 2Apr24.RDS"))
pss_hist <- read_xlsx(file.path(dir.data,"ADFG PSS Daily Reports/Yukon Escapement Daily 9Aug23.xlsx"), skip = 3) %>%
mutate(Day = 148:252) %>% # Add a day column with the appropriate day ranges
select(-`Month/Day`) %>%
pivot_longer(cols = -c(Day),
names_to = "Year",
values_to = "count",
names_transform = list(Year = as.numeric)) %>%
replace_na(list(count = 0)) %>% # replace NA with zero
arrange(Year)
eagle_hist <- read_xlsx(file.path(dir.data,"ADFG Eagle Daily Reports/Yukon Escapement Daily Eagle 9Aug23.xlsx"), skip = 3) %>%
mutate(Day = 178:243) %>% # Add a day column with the appropriate day ranges
select(-`Month/Day`) %>%
pivot_longer(cols = -c(Day),
names_to = "Year",
values_to = "count",
names_transform  = list(Year = as.numeric)) %>%
replace_na(list(count = 0)) %>% # replace NA with zero
arrange(Year)
gsi_by_year <- readRDS(file = file.path(dir.data,"GSI by year unadj 4Apr24.RDS"))
pss_sd <- readRDS(file = file.path(dir.data,"PSS SD 1995_2021.RDS"))
prior_df_log <- read.csv(file = file.path(dir.data,"logistic curve parameters All Chinook 1995_2022.csv"))
prior_df_norm <- readRDS(file = file.path(dir.data,"normal curve parameters All Chinook 1995_2023.RDS"))
bica_data <- format_bica_data(
my_year, my_day, end_year,
pf_hist, can_hist, pss_hist, eagle_hist,
gsi_by_year,
pss_sd, prior_df_log, prior_df_norm,
start_day_pss = 148, start_year_pss = 1995
)
model_version <- "pss_reg"
n_chains <- 4
n_iter <- 5000
n_thin <- 1
# stopped here 6/11 Error: Variable 'total_eos' is of invalid type.
bica_out <- run_bica_model(
bica_data,
model_version, normal = FALSE, logistic = FALSE,
n_chains, n_iter, n_thin
)
View(bica_out)
bica_out$summary
bica_out$pars
# stopped here 6/11 Error: Variable 'total_eos' is of invalid type.
bica_out <- run_bica_model(
bica_data,
model_version, normal = FALSE, logistic = FALSE,
n_chains, n_iter = 10000, n_thin = 2
)
bica_out$summary %>% print(n = Inf)
log(2.73e+4)
#' @param n_chains Number of MCMC chains
#' @param n_iter Number of MCMC iterations
#' @param n_thin Amount of thinning for MCMC chains
#' @param model_version Character string. Model version to run.
#'
#' @return
#' @export
#'
#' @examples
#'
run_bica_model <- function(
bica_data,
model_version, normal = FALSE, logistic = FALSE,
n_chains, n_iter, n_thin
) {
# subset data list ----
dat_in <-
list(
"pf" = bica_data$pf,
"pf_sigma" = bica_data$pf_sigma,
"n_years_pf" = bica_data$n_years_pf,
"n_total_eos" = bica_data$n_total_eos,
"total_eos" = bica_data$total_eos,
"n_day_pss" = bica_data$n_day_pss,
"day_pss" = bica_data$day_pss,
"n_year_pss" = bica_data$n_year_pss,
"year_pss" = bica_data$year_pss,
"pss_mat" = bica_data$pss_mat,
"n_curr_pss" = bica_data$n_curr_pss,
"curr_pss" = bica_data$curr_pss,
"loc_pf_years_pss" = bica_data$loc_pf_years_pss
)
# Stan Model Call ######################################
if (logistic == TRUE) { # Logistic model inits list
inits <- function(...) {
list(
"ps_alpha_curr" = runif(1, 1e5, 11e4),
"ps_mid_curr" = runif(1, 168, 170),
"ps_shape_curr" = runif(1, 2, 3),
"ps_shape_hist" = runif(dat_in$n_year_pss, 2, 3),
"ps_mid_hist" = runif(dat_in$n_year_pss, 168, 170),
"ps_alpha_hist" = runif(dat_in$n_year_pss, 1e5, 11e4),
"sigma" = runif(1, 0.1, 0.5),
"sigma_hist" = runif(dat_in$n_year_pss, 0, 1),
"beta" = runif(1, 0.3, 0.5),
"sigma_reg" = runif(1, 0, 1),
"alpha" = runif(1, 500, 1500)
)
}
} else if (normal == TRUE) { # Normal Distribution Inits List
inits <- function(...) {
list(
"ps_alpha_curr" = runif(1, 10e4, 11e4),
"ps_mu_curr" = runif(1, 174, 176),
"ps_sd_curr" = runif(1, 5, 7),
"ps_alpha_hist" = runif(dat_in$n_year_pss, 10e4, 11e4),
"ps_mu_hist" = runif(dat_in$n_year_pss, 174, 176),
"ps_sd_hist" = runif(dat_in$n_year_pss, 5, 7),
"sigma" = runif(1 ,2, 3),
"sigma_hist" = runif(dat_in$n_year_pss, 2, 3),
"beta_sst" = runif(1, -2 ,-1),
"sigma_env" = runif(1, 2.5, 3),
"alpha_env" = runif(1, 177, 178)
)
}
} else if(normal == FALSE & logistic == FALSE) {
# Used for all regression based models
inits <- function(...) {
list(
alpha = runif(1, 150000, 200000),
beta = runif(1, 0, 0.5),
sigma = runif(1, 0, 2),
ln_run_size = runif(1, 5, 15),
)
}
}
# initial values in stan model as a list
inits_ll <- lapply(seq.int(n_chains), inits)
model <- instantiate::stan_package_model(
name = model_version,
package = "bica"
)
fit <- model$sample(
data = dat_in,
init = inits_ll,
chains = n_chains,
parallel_chains = n_chains,
iter_warmup = n_iter / 2,
iter_sampling = n_iter,
thin = n_thin,
max_treedepth = 10,
adapt_delta = 0.95
)
# Record any divergent transitions
# divergent <- get_divergent_iterations(fit)
# n <- sum(divergent)
# N <- length(divergent)
# div.trans <- n / N
fit_summary <- fit$summary()
# Extract parameter estimates
stanfit <- rstan::read_stan_csv(fit$output_files())
pars <- rstan::extract(stanfit)
# Extract fit summary for saving
out <- list(
# "cum_pss" = cum_pss,
# "cum_curr_pss" = cum_curr_pss,
# "day_pss" = day_pss,
# "curr_pss" = curr_pss,
# "cum_pss_adj"= cum_pss_adj,
# "cum_eagle" = cum_eagle,
# "cum_pss_all" = cum_pss_all,
# "total_eos" = total_eos,
# "my_year" = my_year,
# "my_day" = my_day,
# "pss_days_all" = day_pss_all,
# "cum_pss_mat" = cum_pss_mat,
# "pss_mat" = pss_mat,
# "pss_mat_all_adj" = pss_mat_all_adj,
# "pss_mat_all" = pss_mat_all,
# "year_pss" = year_pss,
# "divergent_trans" = div.trans,
"fit" = fit,
"summary" = fit_summary,
"pars" = pars,
"version" = model_version
)
return(out)
}
bica_data <- format_bica_data(
my_year, my_day, end_year,
pf_hist, can_hist, pss_hist, eagle_hist,
gsi_by_year,
pss_sd, prior_df_log, prior_df_norm,
start_day_pss = 148, start_year_pss = 1995
)
n_iter <- 5000
bica_out <- run_bica_model(
bica_data,
model_version, normal = FALSE, logistic = FALSE,
n_chains, n_iter, n_thin
)
#' @param n_chains Number of MCMC chains
#' @param n_iter Number of MCMC iterations
#' @param n_thin Amount of thinning for MCMC chains
#' @param model_version Character string. Model version to run.
#'
#' @return
#' @export
#'
#' @examples
#'
run_bica_model <- function(
bica_data,
model_version, normal = FALSE, logistic = FALSE,
n_chains, n_iter, n_thin
) {
# subset data list ----
dat_in <-
list(
"pf" = bica_data$pf,
"pf_sigma" = bica_data$pf_sigma,
"n_years_pf" = bica_data$n_years_pf,
"n_total_eos" = bica_data$n_total_eos,
"total_eos" = bica_data$total_eos,
"n_day_pss" = bica_data$n_day_pss,
"day_pss" = bica_data$day_pss,
"n_year_pss" = bica_data$n_year_pss,
"year_pss" = bica_data$year_pss,
"pss_mat" = bica_data$pss_mat,
"n_curr_pss" = bica_data$n_curr_pss,
"curr_pss" = bica_data$curr_pss,
"loc_pf_years_pss" = bica_data$loc_pf_years_pss
)
# Stan Model Call ######################################
if (logistic == TRUE) { # Logistic model inits list
inits <- function(...) {
list(
"ps_alpha_curr" = runif(1, 1e5, 11e4),
"ps_mid_curr" = runif(1, 168, 170),
"ps_shape_curr" = runif(1, 2, 3),
"ps_shape_hist" = runif(dat_in$n_year_pss, 2, 3),
"ps_mid_hist" = runif(dat_in$n_year_pss, 168, 170),
"ps_alpha_hist" = runif(dat_in$n_year_pss, 1e5, 11e4),
"sigma" = runif(1, 0.1, 0.5),
"sigma_hist" = runif(dat_in$n_year_pss, 0, 1),
"beta" = runif(1, 0.3, 0.5),
"sigma_reg" = runif(1, 0, 1),
"alpha" = runif(1, 500, 1500)
)
}
} else if (normal == TRUE) { # Normal Distribution Inits List
inits <- function(...) {
list(
"ps_alpha_curr" = runif(1, 10e4, 11e4),
"ps_mu_curr" = runif(1, 174, 176),
"ps_sd_curr" = runif(1, 5, 7),
"ps_alpha_hist" = runif(dat_in$n_year_pss, 10e4, 11e4),
"ps_mu_hist" = runif(dat_in$n_year_pss, 174, 176),
"ps_sd_hist" = runif(dat_in$n_year_pss, 5, 7),
"sigma" = runif(1 ,2, 3),
"sigma_hist" = runif(dat_in$n_year_pss, 2, 3),
"beta_sst" = runif(1, -2 ,-1),
"sigma_env" = runif(1, 2.5, 3),
"alpha_env" = runif(1, 177, 178)
)
}
} else if(normal == FALSE & logistic == FALSE) {
# Used for all regression based models
inits <- function(...) {
list(
alpha = runif(1, 150000, 200000),
beta = runif(1, 0, 0.5),
sigma = runif(1, 0, 2),
ln_run_size = runif(1, 5, 15)
)
}
}
# initial values in stan model as a list
inits_ll <- lapply(seq.int(n_chains), inits)
model <- instantiate::stan_package_model(
name = model_version,
package = "bica"
)
fit <- model$sample(
data = dat_in,
init = inits_ll,
chains = n_chains,
parallel_chains = n_chains,
iter_warmup = n_iter / 2,
iter_sampling = n_iter,
thin = n_thin,
max_treedepth = 10,
adapt_delta = 0.95
)
# Record any divergent transitions
# divergent <- get_divergent_iterations(fit)
# n <- sum(divergent)
# N <- length(divergent)
# div.trans <- n / N
fit_summary <- fit$summary()
# Extract parameter estimates
stanfit <- rstan::read_stan_csv(fit$output_files())
pars <- rstan::extract(stanfit)
# Extract fit summary for saving
out <- list(
# "cum_pss" = cum_pss,
# "cum_curr_pss" = cum_curr_pss,
# "day_pss" = day_pss,
# "curr_pss" = curr_pss,
# "cum_pss_adj"= cum_pss_adj,
# "cum_eagle" = cum_eagle,
# "cum_pss_all" = cum_pss_all,
# "total_eos" = total_eos,
# "my_year" = my_year,
# "my_day" = my_day,
# "pss_days_all" = day_pss_all,
# "cum_pss_mat" = cum_pss_mat,
# "pss_mat" = pss_mat,
# "pss_mat_all_adj" = pss_mat_all_adj,
# "pss_mat_all" = pss_mat_all,
# "year_pss" = year_pss,
# "divergent_trans" = div.trans,
"fit" = fit,
"summary" = fit_summary,
"pars" = pars,
"version" = model_version
)
return(out)
}
bica_data <- format_bica_data(
my_year, my_day, end_year,
pf_hist, can_hist, pss_hist, eagle_hist,
gsi_by_year,
pss_sd, prior_df_log, prior_df_norm,
start_day_pss = 148, start_year_pss = 1995
)
bica_out <- run_bica_model(
bica_data,
model_version, normal = FALSE, logistic = FALSE,
n_chains, n_iter, n_thin
)
foo <- list(a = 1, b = 2)
foo <- list(c = 3)
foo <- list(a = 1, b = 2)
append(foo, list(c = 3))
foo <- append(foo, list(c = 3))
foo2 <- with(foo, list("d" = b))
foo2
foo2 <- with(foo, append(foo2, list("e" = c)))
foo2
library(devtools)
document()
document()
document()
document()
document()
install.packages(pkgs = "D:/bobby_adfg/projects/yukon_chinook_inseason_mdl/bica", type = "source", repos = NULL)
library(readxl)
library(tidyverse)
library(bica)
wd <- "D:/bobby_adfg/projects/yukon_chinook_inseason_mdl/Bayesian-Inseason-Canadian-origin-Chinook-Salmon-Abundance-projection-main"
dir.data <- file.path(wd,"data")
my_year <- 2023
my_day <- my_day_func(Month = 8, Day = 9)
end_year <- my_year - 1
pf_hist <- readRDS(file.path(dir.data,"Yukon Canadian Chinook PF 29May24.RDS"))
can_hist <- readRDS(file.path(dir.data,"Canadian Chinook Passage RR 2Apr24.RDS"))
pss_hist <- read_xlsx(file.path(dir.data,"ADFG PSS Daily Reports/Yukon Escapement Daily 9Aug23.xlsx"), skip = 3) %>%
mutate(Day = 148:252) %>% # Add a day column with the appropriate day ranges
select(-`Month/Day`) %>%
pivot_longer(cols = -c(Day),
names_to = "Year",
values_to = "count",
names_transform = list(Year = as.numeric)) %>%
replace_na(list(count = 0)) %>% # replace NA with zero
arrange(Year)
eagle_hist <- read_xlsx(file.path(dir.data,"ADFG Eagle Daily Reports/Yukon Escapement Daily Eagle 9Aug23.xlsx"), skip = 3) %>%
mutate(Day = 178:243) %>% # Add a day column with the appropriate day ranges
select(-`Month/Day`) %>%
pivot_longer(cols = -c(Day),
names_to = "Year",
values_to = "count",
names_transform  = list(Year = as.numeric)) %>%
replace_na(list(count = 0)) %>% # replace NA with zero
arrange(Year)
gsi_by_year <- readRDS(file = file.path(dir.data,"GSI by year unadj 4Apr24.RDS"))
pss_sd <- readRDS(file = file.path(dir.data,"PSS SD 1995_2021.RDS"))
prior_df_log <- read.csv(file = file.path(dir.data,"logistic curve parameters All Chinook 1995_2022.csv"))
prior_df_norm <- readRDS(file = file.path(dir.data,"normal curve parameters All Chinook 1995_2023.RDS"))
bica_data <- format_bica_data(
my_year, my_day, end_year,
pf_hist, can_hist, pss_hist, eagle_hist,
gsi_by_year,
pss_sd, prior_df_log, prior_df_norm,
start_day_pss = 148, start_year_pss = 1995
)
model_version <- "pss_reg"
n_chains <- 4
n_iter <- 5000
n_thin <- 1
# model_version <- "pss_reg"
model_version <- "pss_normal_es_prop"
bica_out <- run_bica_model(
bica_data,
model_version, normal = FALSE, logistic = FALSE,
n_chains, n_iter, n_thin
)
View(bica_data)
# model_version <- "pss_reg"
model_version <- "pss_norm_es_prop"
bica_out <- run_bica_model(
bica_data,
model_version, normal = FALSE, logistic = FALSE,
n_chains, n_iter, n_thin
)
source("D:/bobby_adfg/projects/yukon_chinook_inseason_mdl/bica/R/model_run.R")
# model_version <- "pss_reg"
model_version <- "pss_normal_es_prop"
bica_out <- run_bica_model(
bica_data,
# model_version, normal = FALSE, logistic = FALSE,
model_version, normal = TRUE, logistic = FALSE,
n_chains, n_iter, n_thin
)
source("D:/bobby_adfg/projects/yukon_chinook_inseason_mdl/bica/R/model_run.R")
bica_out <- run_bica_model(
bica_data,
# model_version, normal = FALSE, logistic = FALSE,
model_version, normal = TRUE, logistic = FALSE,
n_chains, n_iter, n_thin
)
source("D:/bobby_adfg/projects/yukon_chinook_inseason_mdl/bica/R/model_run.R")
bica_out <- run_bica_model(
bica_data,
# model_version, normal = FALSE, logistic = FALSE,
model_version, normal = TRUE, logistic = FALSE,
n_chains, n_iter, n_thin
)
source("D:/bobby_adfg/projects/yukon_chinook_inseason_mdl/bica/R/model_run.R")
model_version
bica_out <- run_bica_model(
bica_data,
# model_version, normal = FALSE, logistic = FALSE,
model_version, normal = TRUE, logistic = FALSE,
n_chains, n_iter, n_thin
)
bica_out <- run_bica_model(
bica_data,
# model_version, normal = FALSE, logistic = FALSE,
model_version, normal = TRUE, logistic = FALSE,
n_chains, n_iter, n_thin
)
source("D:/bobby_adfg/projects/yukon_chinook_inseason_mdl/bica/R/model_run.R")
bica_out <- run_bica_model(
bica_data,
# model_version, normal = FALSE, logistic = FALSE,
model_version, normal = TRUE, logistic = FALSE,
n_chains, n_iter, n_thin
)
source("D:/bobby_adfg/projects/yukon_chinook_inseason_mdl/bica/R/model_run.R")
library(readxl)
library(tidyverse)
library(bica)
wd <- "D:/bobby_adfg/projects/yukon_chinook_inseason_mdl/Bayesian-Inseason-Canadian-origin-Chinook-Salmon-Abundance-projection-main"
dir.data <- file.path(wd,"data")
my_year <- 2023
my_day <- my_day_func(Month = 8, Day = 9)
end_year <- my_year - 1
pf_hist <- readRDS(file.path(dir.data,"Yukon Canadian Chinook PF 29May24.RDS"))
can_hist <- readRDS(file.path(dir.data,"Canadian Chinook Passage RR 2Apr24.RDS"))
pss_hist <- read_xlsx(file.path(dir.data,"ADFG PSS Daily Reports/Yukon Escapement Daily 9Aug23.xlsx"), skip = 3) %>%
mutate(Day = 148:252) %>% # Add a day column with the appropriate day ranges
select(-`Month/Day`) %>%
pivot_longer(cols = -c(Day),
names_to = "Year",
values_to = "count",
names_transform = list(Year = as.numeric)) %>%
replace_na(list(count = 0)) %>% # replace NA with zero
arrange(Year)
eagle_hist <- read_xlsx(file.path(dir.data,"ADFG Eagle Daily Reports/Yukon Escapement Daily Eagle 9Aug23.xlsx"), skip = 3) %>%
mutate(Day = 178:243) %>% # Add a day column with the appropriate day ranges
select(-`Month/Day`) %>%
pivot_longer(cols = -c(Day),
names_to = "Year",
values_to = "count",
names_transform  = list(Year = as.numeric)) %>%
replace_na(list(count = 0)) %>% # replace NA with zero
arrange(Year)
gsi_by_year <- readRDS(file = file.path(dir.data,"GSI by year unadj 4Apr24.RDS"))
pss_sd <- readRDS(file = file.path(dir.data,"PSS SD 1995_2021.RDS"))
prior_df_log <- read.csv(file = file.path(dir.data,"logistic curve parameters All Chinook 1995_2022.csv"))
prior_df_norm <- readRDS(file = file.path(dir.data,"normal curve parameters All Chinook 1995_2023.RDS"))
bica_data <- format_bica_data(
my_year, my_day, end_year,
pf_hist, can_hist, pss_hist, eagle_hist,
gsi_by_year,
pss_sd, prior_df_log, prior_df_norm,
start_day_pss = 148, start_year_pss = 1995
)
model_version <- "pss_normal_es_prop"
n_chains <- 4
n_iter <- 5000
n_thin <- 5
bica_out <- run_bica_model(
bica_data,
# model_version, normal = FALSE, logistic = FALSE,
model_version, normal = TRUE, logistic = FALSE,
n_chains, n_iter, n_thin
)
View(bica_out)
bica_out$summary
bica_out$summary %>% print(n = 20)
max(bica_out$summary$rhat)
max(bica_out$summary$rhat, na.rm = TRUE)
usethis::use_github()
